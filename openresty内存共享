参考：http://wiki.jikexueyuan.com/project/openresty/openresty/share_var.html

openresty 开启 
http {
  server {
    listen 80;
    lua_code_cache on;
    
    location /test {
        content_by_lua_block xxx.lua;
      }
    }
}

其中xxx.lua的local变量都是从新开始， 而在xxx.lua中 local y = require "abc" 中abc的_M模块只会加载一次， 变量可以进行每次访问递增

-- lrucache
https://github.com/openresty/lua-resty-lrucache

- file myapp.lua: example "myapp" module

local _M = {}

-- alternatively: local lrucache = require "resty.lrucache.pureffi"
local lrucache = require "resty.lrucache"

-- we need to initialize the cache on the lua module level so that
-- it can be shared by all the requests served by each nginx worker process:
local c, err = lrucache.new(200)  -- allow up to 200 items in the cache
if not c then
    return error("failed to create the cache: " .. (err or "unknown"))
end

function _M.go()
    c:set("dog", 32)
    c:set("cat", 56)
    ngx.say("dog: ", c:get("dog"))
    ngx.say("cat: ", c:get("cat"))

    c:set("dog", { age = 10 }, 0.1)  -- expire in 0.1 sec
    c:delete("dog")
end

return _M
# nginx.conf

http {
    lua_package_path "/path/to/lua-resty-lrucache/lib/?.lua;;";

    server {
        listen 8080;

        location = /t {
            content_by_lua '
                require("myapp").go()
            ';
        }
    }
}
